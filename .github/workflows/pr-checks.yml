name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]

jobs:
  # Análise de código e testes para PRs
  pr-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: nexedu_test
          POSTGRES_PASSWORD: test123
          POSTGRES_DB: nexedu_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: TypeScript type checking
        run: npm run type-check

      - name: Run unit tests with coverage
        env:
          DATABASE_URL: postgresql://nexedu_test:test123@localhost:5432/nexedu_test
          NODE_ENV: test
        run: |
          npx prisma migrate deploy
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Build Docker image (test)
        run: |
          docker build -t nexedu-api:pr-${{ github.event.number }} .

      - name: Comment PR with test results
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('## 🔍 PR Quality Check Results')
            );

            const body = `## 🔍 PR Quality Check Results

            - ✅ Linting: Passed
            - ✅ Type Checking: Passed  
            - ✅ Unit Tests: Passed
            - ✅ Docker Build: Passed

            **Coverage Report**: Check the details in the Codecov report above.

            _This comment is automatically updated on each push._`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
